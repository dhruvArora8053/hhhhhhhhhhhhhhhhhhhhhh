* {
  /* border-top: 10px solid #1098ad; */
  margin: 0;
  padding: 0;
}
/* to give all the elements same property using inheritance */

body {
  color: #444;
  font-family: sans-serif;
  /* margin: 0; */
  /* margin is not a property that gets inherited to it's child because it is not of text type so you can use it on the global selector */

  position: relative;
}
/* not all properties get inherited, they are mostly about text */

.container {
  width: 800px;
  margin: 0 auto;
}

.main-header {
  background-color: #f7f7f7;
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; */
  padding: 20px 40px;
  margin-bottom: 60px;
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  padding: 50px 0;
  width: 500px;
}

h1,
h2,
h3 {
  color: #1098ad;
  /* margin-bottom: 30px; */
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
}

h3 {
  font-size: 30px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  line-height: 1.5;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
}

li:last-child {
  margin-bottom: 0;
}

footer p {
  font-size: 16px;
}

/* article header p {
  font-style: italic;
} */
/* we should not use descendant selectors that much because it could lead to some potential design problems becuase the same rule could be applied to many places */

#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}
/* we can only add id name only once, so if we need to reuse a name multiple times then we need to use classes for that so mosty use classes to be prepared for future changes  */

.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  list-style: none;
}

/* Pseudo classes */
li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

li:nth-child(2) {
  /* color: red; */
}

li:nth-child(odd) {
  /* color: blue; */
}

article p:first-child {
  color: red;
}

article p:last-child {
  color: red;
}

/* Styling links --> Pseudo classes */
a:link,
a:visited {
  color: #1098ad;
  text-decoration: none;
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline dotted orangered;
}

a:active {
  background-color: black;
  font-style: italic;
}

/* Priority:
0. important! keyword
1. inline style
2. id selector
3. pseudo class
4. element slector
5. universal selector

--> if they are same then they use cascade rules
--> use important! only if you really need it
*/

#copyright {
  color: red;
}

.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green;
}

.post-img {
  width: 100%;
  /* responsiveness relative to width of the parent container width of the parent container */
  height: auto;
  /* adjust according to width */
}

/* total height= borderTop+ paddingTop+ contentArea+ paddingBottom+ borderBottom
Same goes for width
*/

/* 
dispaly: block,
body, main, header, footer, section, nav, aside, div, h1-h6, p, ul, ol, li, etc.

display: inline, 
a, strong, em, button, pseudo-elements etc.

display: inline-block,
img
*/

nav a:link {
  background-color: orangered;
  display: inline-block;
  margin-right: 30px;
  /* margin-top: 10px;z */
}

nav a:link:last-child {
  margin-right: 0;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  position: absolute;
  /* default position of the viewport */
  /* top: 50px;
  left: 50px; */

  bottom: 50px;
  right: 50px;
}

/* Pseudo Elements:- it is the elment which is not actually element in the html but it as if it was an element that we can select */
h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

h2::first-letter {
  font-size: 80px;
}

p::first-line {
  color: red;
}

/* sibling selector */
h3 + p::first-line {
  color: blue;
}

/* after and before pseudo elements:
before: first child of element
after: last child of element
*/

h2 {
  position: relative;
}

h2::after {
  content: "TOP";
  background-color: #ffe70e;
  color: #000;
  font-weight: bold;
  font-size: 16px;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -15px;
  right: -25px;
}

/* FlexBox */
.main-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

